delimiters "%","%"

classDef(className, table, version, timestamp) ::= <<
/* GENERATED CODE - Edits will be lost
 * Generated by JBurg3 %version% FIXME: timestamp
 */
import jburg.BurgInput;

public class %className%
{
    public void label(BurgInput<Nonterminal,NodeType> node)
    {
        for (int i = 0; i < node.getSubtreeCount(); i++) {
            label(node.getSubtree(i));
        }

        if (node != null) {

            switch(node.getNodeType()) {
                %productionTable(table)%
            }
        }
    }

    %labelRoutines(table)%
}
>>

labelRoutine(op) ::= <<
void %op;format="operatorSignature"%(BurgInput<Nonterminal,NodeType> node)
{
    %if(op.transitionTable)%
    %transitionTable(op.transitionTable)%
    %else%
    %leaf(op.leafState)%
    %endif%
}
>>

labelRoutines(t) ::= <<
%t.operatorsByNodeType:{ nt | %t.operatorsByNodeType.(nt): { op | %labelRoutine(op);separator="\n\n"% };separator="\n\n"% };separator="\n\n"%
>>

nodeType(type, ops) ::= <<
    case %type%:
    switch(node.getSubtreeCount()) {
    }
>>

leaf(s) ::= <<
    //State<?,?> assignedState = %s;format="leafState"%.getState(node, visitor);
    //node.setStateNumber(assignedState.number);
    //node.setTransitionTableLeaf(assignedState);
>>

nodeOperators(nodeType, operatorList) ::= <<
case %nodeType%:
    switch(node.getSubtreeCount()) {
        %operatorList:operatorDefinition();separator="\n"%
    }
    break;
>>

operatorDefinition(op) ::= <<
%if(op.variadic)%
default:
    if (node.getSubtreeCount() >= %op.size%) {
        %op;format="operatorSignature"%(node);
    }
%else%
case %op.size%:
    %op;format="operatorSignature"%(node);
%endif%
break;
>>

productionTable(t) ::= <<
%t.operatorsByNodeType:{ nt | %nodeOperators(nt, t.operatorsByNodeType.(nt))% }; separator="\n"%
>>

transitionTable(t) ::= <<
%if(t.nextDimension.empty)%
switch(node.getStateNumber()) {
%t.finalDimIndexMap:{ s | case %s%:
    %leaf(t.statesByIndex.(s))%};separator="\n"%
}
%else%
switch(node.getSubtree(%t.dimension%).getStateNumber()) {
%t.nextDimIndexMap:{ s | case %s%:
    %transitionTable(t.nextDimensionByIndex.(s))%};separator="\n"%
}
%endif%
>>
