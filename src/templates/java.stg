delimiters "%","%"

start(table, uniqueStates) ::= <<
%classDef(table, uniqueStates)%
>>

className() ::= <<
%"";format="class.name"%
>>

nodeClass() ::= <<
%"";format="node.class"%
>>

nodeTypeClass() ::= <<
%"";format="nodeType.class"%
>>

nonterminalClass() ::= <<
%"";format="nonterminal.class"%
>>

visitorClass() ::= <<
%"";format="visitor.class"%
>>

classDef(table, uniqueStates) ::= <<
/* GENERATED CODE - Edits will be lost
 * Generated by JBurg3 %"";format="version"% FIXME: timestamp
 */

public class %className()%
{
    public void label(%visitorClass()% visitor, %nodeClass()% node)
    {
        if (node != null) {

            for (int i = 0; i < node.getSubtreeCount(); i++) {
                label(visitor, node.getSubtree(i));
            }

            switch(node.getNodeType()) {
                %productionTable(table)%
            }
        }
    }

    @SuppressWarnings("unchecked")
    public Object reduce(%"";format="visitor.class"% visitor, %nodeClass()% node, %nonterminalClass()% goalState)
    {
        if (node.getTransitionTableLeaf() != null) {
            TransitionEntry ti = (TransitionEntry)(node.getTransitionTableLeaf());

            return ti.reduce(this, visitor, node, goalState);
        } else {
            throw new IllegalArgumentException("Unlabeled %nodeClass()% " + node.toString());
        }
    }

    %labelRoutines(table)%

    static abstract class TransitionEntry
    {
        abstract void assignState(%visitorClass()% visitor, %nodeClass()% node);
        abstract Object reduce(%className()% reducer, %visitorClass()% visitor, %nodeClass()% node, %nonterminalClass()% goalState);
    }

    %uniqueStates:leafDefinition();separator="\n"%
}
>>

labelRoutine(op) ::= <<
void %op;format="operatorSignature"%(%visitorClass()% visitor, %nodeClass()% node)
{
    %if(op.transitionTable)%
    %transitionTable(op.transitionTable)%
    %else%
    %leafReference(op.leafState)%
    %endif%
}
>>

labelRoutines(t) ::= <<
%t.operatorsByNodeType:{ nt | %t.operatorsByNodeType.(nt): { op | %labelRoutine(op);separator="\n\n"% };separator="\n\n"% };separator="\n\n"%
>>

leafDefinition(s) ::= <<
// %s%
static TransitionEntry %s;format="leafState"% = new TransitionEntry()
{
    void assignState(%visitorClass()% visitor, %nodeClass()% node)
    {
        %s.statesByMethod:assignState()%
    }

    Object reduce(%className()% reducer, %visitorClass()% visitor, %nodeClass()% node, %nonterminalClass()% goalState)
    {
        Object result = null;

        switch(goalState) {
        %s.statesByMethod:{ m | %s.statesByMethod.(m):reducer();separator="\n"%}%
        }

        return result;
    }
};
>>

assignState(methods) ::= <<
%if(methods.empty)%
node.setStateNumber(%s.statesByMethod.(methods).stateNumber%);
node.setTransitionTableLeaf(this);
%else%
%methods: { m | boolean b%m.name% = visitor.%m.name%(node); };separator="\n"%
%s.statesByMethod:predicatedState()%
%endif%
>>

predicatedState(key) ::= <<
if (%key:predicateInvocation();separator=" && "%) {
    node.setStateNumber(%s.statesByMethod.(key).stateNumber%);
    node.setTransitionTableLeaf(this);
}
>>

predicateInvocation(m) ::= <<
visitor.%m.name%(node)
>>

reducer(s) ::= <<
%s.nonterminals:reduceCase();separator="\n"%
>>

reduceCase(nt) ::= <<
case %nt%: {
%if(s.patterns.(nt))%
    %reduction(s.patterns.(nt))%
%elseif (s.closures.(nt))%
    result = reducer.reduce(visitor, node, %nonterminalClass()%.%s.closures.(nt).source%);
    %if(s.closures.(nt).postCallback)%
    result = visitor.%s.closures.(nt).postCallback;format="closurePostCallback"%;
    %endif%
%else%
%endif%

    break;
}
>>

reduction(pattern) ::= <<
%pattern.childDescriptors: { c | Object result%c.position% = reducer.reduce(visitor, node.getSubtree(%c.position%), %nonterminalClass()%.%c.nonterminal%);};separator="\n"%
%if(pattern.postCallback)%
result=visitor.%pattern.postCallback;format="postCallback"%;
%endif%
>>

leafReference(s) ::= <<
%s;format="leafState"%.assignState(visitor, node);
>>

nodeOperators(nodeType, operatorList) ::= <<
case %nodeType%:
    switch(node.getSubtreeCount()) {
        %operatorList:operatorDefinition();separator="\n"%
    }
    break;
>>

operatorDefinition(op) ::= <<
%if(op.variadic)%
default:
    if (node.getSubtreeCount() >= %op.size%) {
        %op;format="operatorSignature"%(visitor, node);
    }
%else%
case %op.size%:
    %op;format="operatorSignature"%(visitor, node);
%endif%
    break;
>>

productionTable(t) ::= <<
%t.operatorsByNodeType:{ nt | %nodeOperators(nt, t.operatorsByNodeType.(nt))% }; separator="\n"%
>>

transitionTable(t) ::= <<
%if(t.nextDimension.empty)%
switch(node.getSubtree(%t.dimension%).getStateNumber()) {
%t.finalDimIndexMap:transitionTableLeaf();separator="break;\n"%
}
%else%
switch(node.getSubtree(%t.dimension%).getStateNumber()) {
%t.nextDimIndexMap:{ s | case %s%:
    %transitionTable(t.nextDimensionByIndex.(s))%};separator="break;\n"%
}
%endif%
>>

transitionTableLeaf(s) ::= <<
case %s%: %leafReference(t.statesByIndex.(s))%
>>
