delimiters "%","%"

// ** Start State **
start(table, includes, uniqueStates) ::= <<
%classDef(table, includes, uniqueStates)%
>>

// ** Property Access **
className() ::= <<%"";format="class.name"%>>

nodeClass() ::= <<%"";format="node.class"%>>

nodeTypeClass() ::= <<%"";format="nodeType.class"%>>

nonterminalClass() ::= <<%"";format="nonterminal.class"%>>

resultType() ::= <<%"";format="result.type"%>>

timestamp() ::=<<%"";format="timestamp"%>>

version() ::= <<%"";format="version"%>>

visitorClass() ::= <<%"";format="visitor.class"%>>

// ** Table Translation, mostly alphabetical **
assignState(methods) ::= <<
%if(methods.empty)%
node->setStateNumber(%s.statesByMethod.(methods).stateNumber%);
node->setTransitionTableLeaf(this);
%else%
%methods: { m | bool %m:predicateResult()% = %m:predicateInvocation()%; };separator="\n"%
%s.statesByMethod:predicatedState()%
%endif%
>>

classDef(table, includes, uniqueStates) ::= <<
/* GENERATED CODE - Edits will be lost
 * Generated by JBurg3 %version()% %timestamp()%
 */

#include <stdexcept>
%includes;format="include"%

void %className()%::label(%visitorClass()%& visitor, %nodeClass()%* node)
{
    if (node) {

        for (size_t i = 0; i < node->getSubtreeCount(); i++) {
            label(visitor, node->getSubtree(i));
        }

        switch(node->getNodeType()) {
            %productionTable(table)%
            default:
                node->setStateNumber(jburg::ErrorStateNumber);
                break;
        }
    }
}

%resultType()% %className()%::reduce(%visitorClass()%& visitor, %nodeClass()%* node, %nonterminalClass()% goalState)
{
    if (node->getTransitionTableLeaf()) {
        %className()%::TransitionEntry* ti = (%className()%::TransitionEntry*)(node->getTransitionTableLeaf());
        return ti->reduce(*this, visitor, node, goalState);
    } else {
        return errorHandler.reduce(visitor, node, goalState);
    }
}

%labelRoutines(table)%

%uniqueStates:leafClassDeclaration();separator="\n\n"%
%uniqueStates:leafDefinition();separator="\n\n"%

%errorState(table.errorState)%
>>

errorClosure(c) ::= <<
case %c.nonterminal%: {
        %resultType()% result = reduce(visitor, node, %nonterminalClass()%.%c.source%);
        %if(c.postCallback)%
        result = visitor.%c.postCallback;format="closurePostCallback"%;
        %endif%
        return result;
    }
>>

errorState(s) ::= <<
%resultType()% %className()%::ErrorHandler::reduce(%visitorClass()%& visitor, %nodeClass()%* node, %nonterminalClass()% goalState)
{
    %if(s.nonterminal)%
    switch(goalState) {
    case %nonterminalClass()%::%s.nonterminal%:
        return visitor.%s.patterns.(s.nonterminal).preCallback.name%(node, goalState);
    %s.closures.values:errorClosure();separator="\n"%
    }
    %endif%

    throw std::logic_error("unhandled tree parse failure");
}

%className()%::ErrorHandler %className()%::errorHandler;
>>

labelRoutine(op) ::= <<
void %className()%::%op:operatorSignature()%(%visitorClass()%& visitor, %nodeClass()%* node)
{
    %if(op.transitionTable)%
    %transitionTable(op.transitionTable)%
    %else%
    %leafReference(op.leafState)%
    %endif%
}
>>

labelRoutines(t) ::= <<
%t.operatorsByNodeType:{ nt | %t.operatorsByNodeType.(nt): { op | %labelRoutine(op);separator="\n\n"% };separator="\n\n"% };separator="\n\n"%
>>

leafDefinition(s) ::= <<
%className()%::TransitionEntry* %className()%::%s:leafStateName()% = new %s:leafStateName()%Impl();
>>

leafClassDeclaration(s) ::= <<
// %s%
class %s:leafStateName()%Impl: public %className()%::TransitionEntry
{
    virtual void assignState(%visitorClass()%& visitor, %nodeClass()%* node)
    {
        %s.statesByMethod:assignState()%
    }

    virtual %resultType()% reduce(%className()%& reducer, %visitorClass()%& visitor, %nodeClass()%* node, %nonterminalClass()% goalState)
    {
        %resultType()% result;

        switch(goalState) {
        %s.statesByMethod:{ m | %s.statesByMethod.(m):reducer();separator="\n"%}%
        default:
            throw std::logic_error("Unhandled nonterminal");
        }

        return result;
    }
};
>>

leafReference(s) ::= <<
%s:leafStateName()%->assignState(visitor, node);
>>

leafStateName(s) ::=<<%s;format="leafState"%>>

nodeOperators(nodeType, operatorList) ::= <<
case %nodeTypeClass()%::%nodeType%:
    switch(node->getSubtreeCount()) {
        %operatorList:operatorDefinition();separator="\n"%
    }
    break;
>>

operatorDefinition(op) ::= <<
%if(op.variadic)%
default:
    if (node->getSubtreeCount() >= %op.size%) {
        %op:operatorSignature()%(visitor, node);
    }
%else%
case %op.size%:
    %op:operatorSignature()%(visitor, node);
%endif%
    break;
>>

operatorSignature(op) ::= <<%op;format="operatorSignature"%>>

predicatedState(key) ::= <<
if (%key:predicateResult();separator=" && "%) {
    node->setStateNumber(%s.statesByMethod.(key).stateNumber%);
    node->setTransitionTableLeaf(this);
}
>>

predicateInvocation(m) ::= <<
visitor.%m.name%(node)
>>

predicateResult(m) ::= <<
b%m.name%
>>

productionTable(t) ::= <<
%t.operatorsByNodeType:{ nt | %nodeOperators(nt, t.operatorsByNodeType.(nt))% }; separator="\n"%
>>

reducer(s) ::= <<
%s.nonterminals:reduceCase();separator="\n"%
>>

reduceCase(nt) ::= <<
case %nonterminalClass()%::%nt%: {
%if(s.patterns.(nt))%
    %reduction(s.patterns.(nt))%
%elseif (s.closures.(nt))%
    result = reducer.reduce(visitor, node, %nonterminalClass()%::%s.closures.(nt).source%);
    %if(s.closures.(nt).postCallback)%
    result = visitor.%s.closures.(nt).postCallback;format="closurePostCallback"%;
    %endif%
%else%
%endif%

    break;
}
>>

reduction(pattern) ::= <<
%if(pattern.preCallback)%
visitor.%pattern.preCallback.name%(node, goalState);
%endif%
%pattern.nonVariadicChildDescriptors: { c | %resultType()% result%c.position% = reducer.reduce(visitor, node->getSubtree(%c.position%), %nonterminalClass()%::%c.nonterminal%);};separator="\n"%
%if(pattern.isVarArgs)%
std::vector<%resultType()%> variadicActuals;
for (int i = 0; i < node->getSubtreeCount() - %pattern;format="postCallback.variadicOffset"%; i++) {
    variadicActuals.push_back(reducer.reduce(visitor, node->getSubtree(i + %pattern;format="postCallback.variadicOffset"%), %nonterminalClass()%::%pattern.variadicNonterminal%));
}
%endif%
%if(pattern.postCallback)%
result=visitor.%pattern.postCallback;format="postCallback"%;
%else%
// No post callback...
%endif%
>>

transitionTable(t) ::= <<
%if(t.nextDimension.empty)%
switch(node->getSubtree(%t.dimension%)->getStateNumber()) {
%t.finalDimIndexMap:transitionTableLeaf();separator="break;\n"%
}
%else%
switch(node->getSubtree(%t.dimension%)->getStateNumber()) {
%t.nextDimIndexMap:{ s | case %s%:
    %transitionTable(t.nextDimensionByIndex.(s))%};separator="break;\n"%
}
%endif%
>>

transitionTableLeaf(s) ::= <<
case %s%: %leafReference(t.statesByIndex.(s))%
>>
